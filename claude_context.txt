File: backend/src/db/models/school.py
from datetime import datetime
from typing import List, Optional, Dict, Any
from sqlmodel import Field, SQLModel, Relationship, JSON


class School(SQLModel, table=True):
    """Model for schools integrating with the platform."""

    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    code: str = Field(index=True, unique=True)  # Unique identifier for the school

    # School details
    address: str
    city: str
    region: str = Field(index=True)
    school_type: str = Field(index=True)  # public, private, mission, international
    education_levels: List[str] = Field(
        default=[], sa_type=JSON
    )  # primary, college, lycee, university

    # Contact information
    contact_email: str
    contact_phone: str
    website: Optional[str] = None

    # Administrative details
    admin_user_id: Optional[int] = Field(default=None, foreign_key="users.id")
    is_active: bool = True
    subscription_type: str = "basic"  # basic, premium, enterprise
    subscription_expires: Optional[datetime] = None

    # Branding
    logo_url: Optional[str] = None
    color_scheme: Optional[str] = None

    # Integration settings
    integration_settings: Dict[str, Any] = Field(default={}, sa_type=JSON)
    api_key: Optional[str] = None

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    departments: List["Department"] = Relationship(back_populates="school")
    school_classes: List["SchoolClass"] = Relationship(back_populates="school")
    staff_members: List["SchoolStaff"] = Relationship(back_populates="school")
    school_courses: List["SchoolCourse"] = Relationship(back_populates="school")
    students: List["SchoolStudent"] = Relationship(back_populates="school")


class Department(SQLModel, table=True):
    """Model for academic departments within a school."""

    id: Optional[int] = Field(default=None, primary_key=True)
    school_id: int = Field(foreign_key="school.id", index=True)
    name: str
    code: str = Field(index=True)  # Department code

    # Department details
    description: Optional[str] = None
    education_level: Optional[str] = None  # primary, college, lycee, university

    # Administrative details
    head_staff_id: Optional[int] = Field(default=None, foreign_key="schoolstaff.id")

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    school: School = Relationship(back_populates="departments")
    courses: List["SchoolCourse"] = Relationship(back_populates="department")
    staff_members: List["DepartmentStaffAssignment"] = Relationship(
        back_populates="department"
    )


class SchoolClass(SQLModel, table=True):
    """Model for classes/sections within a school."""

    id: Optional[int] = Field(default=None, primary_key=True)
    school_id: int = Field(foreign_key="school.id", index=True)
    name: str  # e.g., "Class 10A", "Section B"

    # Class details
    academic_year: str = Field(index=True)  # e.g., "2024-2025"
    education_level: str = Field(index=True)  # primary_1, bac_2, etc.
    academic_track: Optional[str] = Field(
        default=None, index=True
    )  # sciences_math_a, etc.

    # Class information
    room_number: Optional[str] = None
    capacity: Optional[int] = None

    # Administrative details
    homeroom_teacher_id: Optional[int] = Field(
        default=None, foreign_key="schoolstaff.id"
    )

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    school: School = Relationship(back_populates="school_classes")
    students: List["ClassEnrollment"] = Relationship(back_populates="school_class")
    class_schedules: List["ClassSchedule"] = Relationship(back_populates="school_class")


class SchoolStaff(SQLModel, table=True):
    """Model for staff members (teachers, administrators) at a school."""

    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(foreign_key="users.id", index=True)
    school_id: int = Field(foreign_key="school.id", index=True)

    # Staff details
    staff_type: str = Field(index=True)  # teacher, admin, counselor, principal
    employee_id: Optional[str] = None

    # Teacher-specific fields
    is_teacher: bool = Field(default=False, index=True)
    qualifications: List[str] = Field(default=[], sa_type=JSON)
    expertise_subjects: List[str] = Field(default=[], sa_type=JSON)

    # Administrative
    hire_date: Optional[datetime] = None
    is_active: bool = True

    # Contact details
    work_email: Optional[str] = None
    work_phone: Optional[str] = None

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    user: "User" = Relationship()  # Link to main user account # noqa: F821
    school: School = Relationship(back_populates="staff_members")
    department_assignments: List["DepartmentStaffAssignment"] = Relationship(
        back_populates="staff_member"
    )
    taught_courses: List["SchoolCourse"] = Relationship(back_populates="teacher")
    class_schedules: List["ClassSchedule"] = Relationship(back_populates="teacher")


class DepartmentStaffAssignment(SQLModel, table=True):
    """Model for assigning staff to departments."""

    id: Optional[int] = Field(default=None, primary_key=True)
    department_id: int = Field(foreign_key="department.id", index=True)
    staff_id: int = Field(foreign_key="schoolstaff.id", index=True)

    # Assignment details
    role: str  # member, coordinator, head
    is_primary: bool = False

    # Timestamps
    assigned_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    department: Department = Relationship(back_populates="staff_members")
    staff_member: SchoolStaff = Relationship(back_populates="department_assignments")


class SchoolCourse(SQLModel, table=True):
    """Enhanced model for school courses with AI tutoring integration."""

    id: Optional[int] = Field(default=None, primary_key=True)
    school_id: int = Field(foreign_key="school.id", index=True)
    department_id: Optional[int] = Field(
        default=None, foreign_key="department.id", index=True
    )
    platform_course_id: Optional[int] = Field(default=None, foreign_key="course.id")
    teacher_id: Optional[int] = Field(default=None, foreign_key="schoolstaff.id")

    # Course details
    title: str
    code: str  # School's course code
    description: str

    # Academic information
    academic_year: str = Field(index=True)
    education_level: str = Field(index=True)
    academic_track: Optional[str] = Field(default=None, index=True)
    credits: Optional[float] = None

    # Course Structure
    syllabus: Dict[str, Any] = Field(default={}, sa_type=JSON)
    learning_objectives: List[str] = Field(default=[], sa_type=JSON)
    prerequisites: List[str] = Field(default=[], sa_type=JSON)

    # AI Tutoring Integration
    ai_tutoring_enabled: bool = True
    ai_tutoring_config: Dict[str, Any] = Field(default={}, sa_type=JSON)
    suggested_topics: List[str] = Field(default=[], sa_type=JSON)

    # Course Materials
    required_materials: Dict[str, Any] = Field(default={}, sa_type=JSON)
    supplementary_resources: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Assessment Configuration
    grading_schema: Dict[str, Any] = Field(default={}, sa_type=JSON)
    assessment_types: List[str] = Field(default=[], sa_type=JSON)

    # Collaboration Settings
    allow_group_work: bool = True
    peer_review_enabled: bool = False
    discussion_enabled: bool = True

    # Status and Schedule
    status: str = "active"  # draft, active, archived
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    teacher: Optional["SchoolStaff"] = Relationship(back_populates="taught_courses")  # noqa: F821
    school: "School" = Relationship(back_populates="school_courses")  # noqa: F821
    department: Optional["Department"] = Relationship(back_populates="courses")  # noqa: F821
    platform_course: Optional["Course"] = Relationship()  # noqa: F821
    professors: List["ProfessorCourse"] = Relationship(back_populates="course")  # noqa: F821
    class_schedules: List["ClassSchedule"] = Relationship(back_populates="course")  # noqa: F821
    course_enrollments: List["CourseEnrollment"] = Relationship(back_populates="course")  # noqa: F821
    assignments: List["Assignment"] = Relationship(back_populates="course")  # noqa: F821
    materials: List["CourseMaterial"] = Relationship()  # noqa: F821
    tutoring_sessions: List["CourseAITutoringSession"] = Relationship(  # noqa: F821
        back_populates="course"
    )


class SchoolStudent(SQLModel, table=True):
    """Model for students enrolled in a school."""

    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(foreign_key="users.id", index=True)
    school_id: int = Field(foreign_key="school.id", index=True)

    # Student details
    student_id: str  # School's ID for the student
    enrollment_date: datetime

    # Academic information
    education_level: str = Field(index=True)  # primary_1, bac_2, etc.
    academic_track: Optional[str] = Field(default=None, index=True)

    # Status
    is_active: bool = True
    graduation_year: Optional[str] = None

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    user: "User" = Relationship()  # Link to main user account # noqa: F821
    school: School = Relationship(back_populates="students")
    class_enrollments: List["ClassEnrollment"] = Relationship(back_populates="student")
    course_enrollments: List["CourseEnrollment"] = Relationship(
        back_populates="student"
    )
    assignment_submissions: List["AssignmentSubmission"] = Relationship(
        back_populates="student"
    )


class ClassEnrollment(SQLModel, table=True):
    """Model for student enrollment in classes."""

    id: Optional[int] = Field(default=None, primary_key=True)
    student_id: int = Field(foreign_key="schoolstudent.id", index=True)
    class_id: int = Field(foreign_key="schoolclass.id", index=True)

    # Enrollment details
    academic_year: str = Field(index=True)  # e.g., "2024-2025"
    enrollment_date: datetime = Field(default_factory=datetime.utcnow)

    # Status
    status: str = "active"  # active, inactive, transferred, graduated

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    student: SchoolStudent = Relationship(back_populates="class_enrollments")
    school_class: SchoolClass = Relationship(back_populates="students")


class CourseEnrollment(SQLModel, table=True):
    """Model for student enrollment in school courses."""

    id: Optional[int] = Field(default=None, primary_key=True)
    student_id: int = Field(foreign_key="schoolstudent.id", index=True)
    course_id: int = Field(foreign_key="schoolcourse.id", index=True)

    # Enrollment details
    academic_year: str = Field(index=True)  # e.g., "2024-2025"
    enrollment_date: datetime = Field(default_factory=datetime.utcnow)

    # Performance tracking
    grade: Optional[float] = None
    grade_letter: Optional[str] = None
    attendance_percentage: Optional[float] = None

    # Status
    status: str = "enrolled"  # enrolled, completed, dropped, failed
    completion_date: Optional[datetime] = None

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    student: SchoolStudent = Relationship(back_populates="course_enrollments")
    course: SchoolCourse = Relationship(back_populates="course_enrollments")


class ClassSchedule(SQLModel, table=True):
    """Model for class schedules and timetables."""

    id: Optional[int] = Field(default=None, primary_key=True)
    class_id: int = Field(foreign_key="schoolclass.id", index=True)
    course_id: int = Field(foreign_key="schoolcourse.id", index=True)
    teacher_id: int = Field(foreign_key="schoolstaff.id", index=True)

    # Schedule details
    day_of_week: int  # 0-6 (Monday-Sunday)
    start_time: str  # HH:MM format
    end_time: str  # HH:MM format
    room: Optional[str] = None

    # Recurring pattern
    recurrence_pattern: str = "weekly"  # weekly, biweekly, once
    start_date: datetime
    end_date: Optional[datetime] = None

    # Status
    is_active: bool = True

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    school_class: SchoolClass = Relationship(back_populates="class_schedules")
    course: SchoolCourse = Relationship(back_populates="class_schedules")
    teacher: SchoolStaff = Relationship(back_populates="class_schedules")


class Assignment(SQLModel, table=True):
    """Model for assignments given to students."""

    id: Optional[int] = Field(default=None, primary_key=True)
    course_id: int = Field(foreign_key="schoolcourse.id", index=True)
    professor_id: Optional[int] = Field(default=None, foreign_key="schoolprofessor.id")

    # Assignment details
    title: str
    description: str
    assignment_type: str  # homework, project, quiz, exam

    # Timeframe
    assigned_date: datetime = Field(default_factory=datetime.utcnow)
    due_date: datetime

    # Grading
    points_possible: float
    grading_criteria: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Content
    instructions: str
    materials: Dict[str, Any] = Field(default={}, sa_type=JSON)
    resources: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Status
    is_published: bool = True

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    course: "SchoolCourse" = Relationship(back_populates="assignments")  # noqa: F821
    submissions: List["AssignmentSubmission"] = Relationship(
        back_populates="assignment"
    )  # noqa: F821
    professor: Optional["SchoolProfessor"] = Relationship(back_populates="assignments")  # noqa: F821


class AssignmentSubmission(SQLModel, table=True):
    """Model for student submissions to assignments."""

    id: Optional[int] = Field(default=None, primary_key=True)
    assignment_id: int = Field(foreign_key="assignment.id", index=True)
    student_id: int = Field(foreign_key="schoolstudent.id", index=True)

    # Submission details
    submission_date: datetime = Field(default_factory=datetime.utcnow)
    content: Dict[str, Any] = Field(
        sa_type=JSON
    )  # Flexible storage for various submission types

    # Status
    status: str = "submitted"  # draft, submitted, graded, returned

    # Grading
    grade: Optional[float] = None
    feedback: Optional[str] = None
    graded_by: Optional[int] = Field(default=None, foreign_key="schoolstaff.id")
    graded_at: Optional[datetime] = None

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    assignment: Assignment = Relationship(back_populates="submissions")
    student: SchoolStudent = Relationship(back_populates="assignment_submissions")


# Additional models to enhance school integration


class LessonPlan(SQLModel, table=True):
    """Model for teacher lesson plans."""

    id: Optional[int] = Field(default=None, primary_key=True)
    course_id: int = Field(foreign_key="schoolcourse.id", index=True)
    teacher_id: int = Field(foreign_key="schoolstaff.id", index=True)

    # Lesson details
    title: str
    description: str
    objectives: List[str] = Field(default=[], sa_type=JSON)

    # Content
    content: Dict[str, Any] = Field(default={}, sa_type=JSON)
    resources: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Scheduling
    planned_date: Optional[datetime] = None
    duration_minutes: int

    # Status
    status: str = "draft"  # draft, ready, delivered, archived

    # AI integration
    ai_enhanced: bool = False
    ai_contributions: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None


class AttendanceRecord(SQLModel, table=True):
    """Model for tracking student attendance."""

    id: Optional[int] = Field(default=None, primary_key=True)
    class_id: int = Field(foreign_key="schoolclass.id", index=True)
    student_id: int = Field(foreign_key="schoolstudent.id", index=True)

    # Attendance details
    date: datetime = Field(index=True)
    status: str  # present, absent, late, excused

    # Additional information
    notes: Optional[str] = None
    recorded_by: Optional[int] = Field(default=None, foreign_key="schoolstaff.id")

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None


class SchoolAnnouncement(SQLModel, table=True):
    """Model for school-wide or department-specific announcements."""

    id: Optional[int] = Field(default=None, primary_key=True)
    school_id: int = Field(foreign_key="school.id", index=True)
    department_id: Optional[int] = Field(default=None, foreign_key="department.id")

    # Announcement details
    title: str
    content: str

    # Publishing details
    published_by: int = Field(foreign_key="schoolstaff.id")
    published_at: datetime = Field(default_factory=datetime.utcnow)

    # Target audience
    audience_type: str  # all, staff, students, parents, department
    target_classes: List[int] = Field(default=[], sa_type=JSON)

    # Display settings
    priority: str = "normal"  # low, normal, high, urgent
    expires_at: Optional[datetime] = None

    # Status
    is_published: bool = True

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None


File: backend/src/db/models/user.py
from sqlmodel import SQLModel, Field
from datetime import datetime
from typing import Optional, Dict, Any
from sqlmodel import JSON
from typing import List
from sqlmodel import Relationship


class User(SQLModel, table=True):
    """User database model with enhanced academic profile fields"""

    __tablename__ = "users"

    id: int = Field(default=None, primary_key=True)

    # Basic info
    email: str = Field(..., index=True, unique=True)
    username: str = Field(..., index=True, unique=True)
    full_name: str
    hashed_password: str

    # Profile data
    avatar: Optional[str] = None
    locale: str = "ar"  # Default to Arabic, options: ar, fr, en

    # User type and detailed education info (enhanced for onboarding)
    user_type: str = Field(..., index=True)  # student, teacher, parent, admin

    # Education level mapping from onboarding
    education_level: Optional[str] = Field(default=None, index=True)
    # Options: primary_1 through primary_6, college_7 through college_9,
    # tronc_commun, bac_1, bac_2, university

    # School information (enhanced from onboarding)
    school_type: Optional[str] = Field(default=None, index=True)
    # Options: public, private, mission, international, homeschool
    school_name: Optional[str] = None
    region: Optional[str] = Field(default=None, index=True)
    # Options: casablanca-settat, rabat-sale-kenitra, marrakech-safi, etc.

    # Academic track (filière) from onboarding
    academic_track: Optional[str] = Field(default=None, index=True)
    # For high school: sciences_math_a, svt_pc, etc.
    # For university: uni_fst, uni_medicine, etc.

    # Learning preferences from onboarding
    learning_style: Optional[str] = Field(default=None)
    # Options: visual, auditory, reading, kinesthetic
    study_habits: List[str] = Field(default=[], sa_type=JSON)
    # Options: morning, evening, concentrated, spaced, group, individual
    academic_goals: List[str] = Field(default=[], sa_type=JSON)
    # Options: academic-excellence, bac-preparation, etc.

    # Account status
    is_active: bool = Field(default=True)
    is_verified: bool = Field(default=False)
    has_onboarded: bool = Field(default=False)

    # Security and tracking fields
    failed_login_attempts: int = Field(default=0)
    last_login_attempt: Optional[datetime] = None
    last_login: Optional[datetime] = None
    token_revoked_at: Optional[datetime] = None

    # Account creation
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Password reset tracking
    reset_token: Optional[str] = None
    reset_token_expires: Optional[datetime] = None

    # User settings and preferences
    settings: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Privacy and data preferences
    data_consent: bool = Field(default=False)

    # Relationships (existing)
    guardians: List["Guardian"] = Relationship(
        back_populates="student",
        sa_relationship_kwargs={"foreign_keys": "[Guardian.student_id]"},
    )
    supervised_students: List["Guardian"] = Relationship(
        back_populates="parent",
        sa_relationship_kwargs={"foreign_keys": "[Guardian.parent_id]"},
    )
    enrollments: List["Enrollment"] = Relationship(back_populates="user")  # noqa: F821
    activities: List["Activity"] = Relationship(back_populates="user")  # noqa: F821
    tutoring_sessions: List["TutoringSession"] = Relationship(back_populates="user")  # noqa: F821
    detailed_tutoring_sessions: List["DetailedTutoringSession"] = Relationship(  # noqa: F821
        back_populates="user"
    )
    recommendations: List["Recommendation"] = Relationship(back_populates="user")  # noqa: F821
    achievements: List["Achievement"] = Relationship(back_populates="user")  # noqa: F821
    notifications: List["Notification"] = Relationship(back_populates="user")  # noqa: F821
    messages: List["Message"] = Relationship(  # noqa: F821
        back_populates="user",
        sa_relationship_kwargs={"foreign_keys": "[Message.user_id]"},
    )

    # New relationships for onboarding preferences
    subject_interests: List["UserSubjectInterest"] = Relationship(back_populates="user")  # noqa: F821


class Guardian(SQLModel, table=True):
    """Model for parent/guardian relationships to students."""

    id: Optional[int] = Field(default=None, primary_key=True)
    student_id: int = Field(foreign_key="users.id", index=True)
    parent_id: int = Field(foreign_key="users.id", index=True)
    relationship: str  # "parent", "guardian", "teacher", "counselor"
    can_view_progress: bool = True
    can_view_messages: bool = True
    can_edit_profile: bool = False
    created_at: datetime = Field(default_factory=datetime.utcnow)

    # Relationships
    student: User = Relationship(
        back_populates="guardians",
        sa_relationship_kwargs={"primaryjoin": "Guardian.student_id==User.id"},
    )
    parent: User = Relationship(
        back_populates="supervised_students",
        sa_relationship_kwargs={"primaryjoin": "Guardian.parent_id==User.id"},
    )


File: backend/src/db/models/recommendations.py
from datetime import datetime
from typing import Optional, Dict, Any
from sqlmodel import Field, SQLModel, Relationship, JSON

from .user import User
from .content import Subject, Lesson, Topic

from .content import Course

from typing import List


class Recommendation(SQLModel, table=True):
    """Model for personalized learning recommendations."""

    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(foreign_key="users.id")

    # Recommendation details
    type: str  # "topic", "lesson", "practice", "tutoring", "course"
    title: str
    description: str
    priority: int = 3  # 1-5 (1 = highest)
    image_url: Optional[str] = None

    # Reference IDs (optional, depends on recommendation type)
    subject_id: Optional[int] = Field(default=None, foreign_key="subject.id")
    topic_id: Optional[int] = Field(default=None, foreign_key="topic.id")
    lesson_id: Optional[int] = Field(default=None, foreign_key="lesson.id")
    course_id: Optional[int] = Field(default=None, foreign_key="course.id")

    # Additional data
    data: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Status
    created_at: datetime = Field(default_factory=datetime.utcnow)
    viewed_at: Optional[datetime] = None
    acted_upon: bool = False
    expires_at: Optional[datetime] = None

    # Relationships
    user: User = Relationship(back_populates="recommendations")
    subject: Optional[Subject] = Relationship()
    topic: Optional[Topic] = Relationship()
    lesson: Optional[Lesson] = Relationship()
    course: Optional[Course] = Relationship()


class ExplorationTopic(SQLModel, table=True):
    """Model for curated exploration topics shown on dashboard."""

    id: Optional[int] = Field(default=None, primary_key=True)
    title: str
    description: str
    type: str  # "academic", "interdisciplinary", "cultural", "current-event"
    image_url: Optional[str] = None
    is_featured: bool = False
    is_new: bool = False

    # Topic connections
    connects_concepts: List[str] = Field(default=[], sa_type=JSON)
    related_subjects: List[str] = Field(default=[], sa_type=JSON)

    # Display details
    color_scheme: Optional[str] = None
    icon: Optional[str] = None

    # Content and metadata
    content: Dict[str, Any] = Field(default={}, sa_type=JSON)
    created_at: datetime = Field(default_factory=datetime.utcnow)
    meta_data: Dict[str, Any] = Field(default={}, sa_type=JSON)


File: backend/src/db/models/__init__.py
"""Initialize database models and handle circular imports."""

# Import all models in a way that avoids circular import issues
from typing import Dict, Type
from sqlmodel import SQLModel

# Import all model files - the imports themselves register the models
from .user import User, Guardian
from .content import Subject, Topic, Lesson, Course, CourseTopic, UserSubjectInterest
from .progress import Enrollment, Activity, Achievement
from .recommendations import Recommendation, ExplorationTopic
from .tutoring import (
    TutoringSession,
    DetailedTutoringSession,
    TutoringExchange,
    SessionResource,
)
from .communication import Notification, Message
from .community import StudySession, StudyGroup, StudyGroupMember, ForumPost, ForumReply

# Import school-related models
from .school import (
    School,
    Department,
    SchoolClass,
    SchoolStaff,
    DepartmentStaffAssignment,
    SchoolCourse,
    SchoolStudent,
    ClassEnrollment,
    CourseEnrollment,
    ClassSchedule,
    Assignment,
    AssignmentSubmission,
    LessonPlan,
    AttendanceRecord,
    SchoolAnnouncement,
)

# Import professor-related models
from .professor import (
    SchoolProfessor,
    ProfessorCourse,
    CourseMaterial,
)

# Also import CourseAITutoringSession model to fix relationships
from .tutoring_integration import CourseAITutoringSession

# Dictionary to store all model classes
models: Dict[str, Type[SQLModel]] = {}

# Expose all models in __all__ for star imports
__all__ = [
    # User models
    "User",
    "Guardian",
    # Content models
    "Subject",
    "Topic",
    "Lesson",
    "Course",
    "CourseTopic",
    "UserSubjectInterest",
    # Progress tracking models
    "Enrollment",
    "Activity",
    "Achievement",
    # AI Tutoring models
    "TutoringSession",
    "DetailedTutoringSession",
    "TutoringExchange",
    "SessionResource",
    "CourseAITutoringSession",
    # Recommendation models
    "Recommendation",
    "ExplorationTopic",
    # Communication models
    "Notification",
    "Message",
    # Community and social learning models
    "StudySession",
    "StudyGroup",
    "StudyGroupMember",
    "ForumPost",
    "ForumReply",
    # School models
    "School",
    "Department",
    "SchoolClass",
    "SchoolStaff",
    "DepartmentStaffAssignment",
    "SchoolCourse",
    "SchoolStudent",
    "ClassEnrollment",
    "CourseEnrollment",
    "ClassSchedule",
    "Assignment",
    "AssignmentSubmission",
    "LessonPlan",
    "AttendanceRecord",
    "SchoolAnnouncement",
    # Professor models
    "SchoolProfessor",
    "ProfessorCourse",
    "CourseMaterial",
]


# Verify that all models are properly loaded
def verify_models():
    """Verify that all expected models are loaded and registered."""
    missing_models = [model for model in __all__ if model not in globals()]
    if missing_models:
        raise ImportError(
            f"Failed to import the following models: {', '.join(missing_models)}"
        )


# Run verification when the module is imported
verify_models()


File: backend/src/db/models/tutoring_integration.py
from datetime import datetime
from typing import Optional, Dict, Any
from sqlmodel import Field, SQLModel, Relationship, JSON


class CourseAITutoringSession(SQLModel, table=True):
    """Model for AI tutoring sessions integrated with courses."""

    id: Optional[int] = Field(default=None, primary_key=True)
    course_id: int = Field(foreign_key="schoolcourse.id", index=True)
    student_id: int = Field(foreign_key="schoolstudent.id", index=True)

    # Session details
    title: str
    start_time: datetime = Field(default_factory=datetime.utcnow)
    end_time: Optional[datetime] = None
    duration_seconds: Optional[int] = None

    # Session data
    context: Dict[str, Any] = Field(default={}, sa_type=JSON)
    learning_objectives: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Status
    status: str = "active"  # active, completed, paused

    # Relationships
    course: "SchoolCourse" = Relationship(back_populates="tutoring_sessions")  # noqa: F821

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None


File: backend/src/db/models/professor.py
from datetime import datetime
from typing import List, Optional, Dict, Any
from sqlmodel import Field, SQLModel, Relationship, JSON


class SchoolProfessor(SQLModel, table=True):
    """Enhanced model for professors with school integration."""

    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(foreign_key="users.id", index=True)
    school_id: int = Field(foreign_key="school.id", index=True)

    # Academic Profile
    title: str  # Prof., Dr., etc.
    department_id: Optional[int] = Field(default=None, foreign_key="department.id")
    specializations: List[str] = Field(default=[], sa_type=JSON)
    academic_rank: str  # Assistant Professor, Associate Professor, etc.
    tenure_status: Optional[str] = None

    # Teaching Details
    teaching_languages: List[str] = Field(default=[], sa_type=JSON)
    preferred_subjects: List[str] = Field(default=[], sa_type=JSON)
    education_levels: List[str] = Field(default=[], sa_type=JSON)

    # Contact & Availability
    office_location: Optional[str] = None
    office_hours: Dict[str, Any] = Field(default={}, sa_type=JSON)
    contact_preferences: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Platform Integration
    ai_collaboration_preferences: Dict[str, Any] = Field(default={}, sa_type=JSON)
    tutoring_availability: bool = True
    max_students: Optional[int] = None

    # Timestamps
    joined_at: datetime = Field(default_factory=datetime.utcnow)
    last_active: Optional[datetime] = None

    # Status
    is_active: bool = True
    account_status: str = "active"  # active, inactive, on_leave

    # Metadata
    meta_data: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Relationships
    user: "User" = Relationship()  # noqa: F821
    school: "School" = Relationship()  # noqa: F821
    department: Optional["Department"] = Relationship()  # noqa: F821
    courses: List["ProfessorCourse"] = Relationship(back_populates="professor")  # noqa: F821
    course_materials: List["CourseMaterial"] = Relationship(back_populates="professor")  # noqa: F821
    assignments: List["Assignment"] = Relationship(back_populates="professor")  # noqa: F821


class ProfessorCourse(SQLModel, table=True):
    """Model for managing professor-course relationships and responsibilities."""

    id: Optional[int] = Field(default=None, primary_key=True)
    professor_id: int = Field(foreign_key="schoolprofessor.id", index=True)
    course_id: int = Field(foreign_key="schoolcourse.id", index=True)

    # Role and Responsibilities
    role: str = "primary"  # primary, secondary, guest, advisor
    responsibilities: List[str] = Field(default=[], sa_type=JSON)

    # Time Period
    academic_year: str = Field(index=True)
    semester: Optional[str] = None
    start_date: datetime
    end_date: Optional[datetime] = None

    # Course Customization
    custom_syllabus: Optional[Dict[str, Any]] = Field(default=None, sa_type=JSON)
    teaching_notes: Optional[Dict[str, Any]] = Field(default=None, sa_type=JSON)

    # Status
    status: str = "active"  # active, completed, planned

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    professor: SchoolProfessor = Relationship(back_populates="courses")
    course: "SchoolCourse" = Relationship(back_populates="professors")  # noqa: F821


class CourseMaterial(SQLModel, table=True):
    """Model for managing course materials and resources."""

    id: Optional[int] = Field(default=None, primary_key=True)
    course_id: int = Field(foreign_key="schoolcourse.id", index=True)
    professor_id: int = Field(foreign_key="schoolprofessor.id", index=True)

    # Material Details
    title: str
    description: str
    material_type: str  # lecture_notes, presentation, worksheet, example, reference
    content: Dict[str, Any] = Field(sa_type=JSON)

    # Organization
    unit: Optional[str] = None
    sequence: Optional[int] = None
    tags: List[str] = Field(default=[], sa_type=JSON)

    # Access Control
    visibility: str = "students"  # students, professors, public
    requires_completion: bool = False

    # AI Integration
    ai_enhanced: bool = False
    ai_features: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None

    # Relationships
    course: "SchoolCourse" = Relationship()  # noqa: F821
    professor: SchoolProfessor = Relationship(back_populates="course_materials")


File: backend/src/db/models/content.py
from datetime import datetime
from typing import List, Optional, Dict, Any
from sqlmodel import Field, SQLModel, Relationship, JSON


class Subject(SQLModel, table=True):
    """Enhanced subject model with education level mapping"""

    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)

    # Updated to match education_level in User model
    grade_level: str = Field(index=True)  # primary_1, bac_2, university, etc.

    description: str
    icon: Optional[str] = None
    color_scheme: Optional[str] = None
    meta_data: Optional[Dict[str, Any]] = Field(default=None, sa_type=JSON)

    # Added fields to match subject options in onboarding
    subject_code: str = Field(index=True)  # mathematics, physics, arabic, etc.
    teaching_language: Optional[str] = None  # ar, fr, en

    # For university subjects
    university_track: Optional[str] = None  # uni_fs, uni_medicine, etc.

    # For high school subjects
    academic_track: Optional[str] = None  # sciences_math_a, lettres_phil, etc.

    # Relationships (existing)
    topics: List["Topic"] = Relationship(back_populates="subject")
    enrollments: List["Enrollment"] = Relationship(back_populates="subject")  # noqa: F821
    courses: List["Course"] = Relationship(back_populates="subject")  # noqa: F821

    # New relationships for onboarding preferences
    interested_users: List["UserSubjectInterest"] = Relationship(
        back_populates="subject"
    )


class UserSubjectInterest(SQLModel, table=True):
    """New model to track user subject interests from onboarding"""

    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(foreign_key="users.id", index=True)
    subject_id: int = Field(foreign_key="subject.id", index=True)
    interest_level: int = 5  # Scale 1-5, default high since selected in onboarding
    created_at: datetime = Field(default_factory=datetime.utcnow)

    # Relationships
    user: "User" = Relationship(back_populates="subject_interests")  # noqa: F821
    subject: "Subject" = Relationship(back_populates="interested_users")  # noqa: F821


class Course(SQLModel, table=True):
    """Enhanced course model with education level and track mapping"""

    id: Optional[int] = Field(default=None, primary_key=True)
    title: str
    subject_id: int = Field(foreign_key="subject.id")
    description: str
    difficulty_level: int = 3  # 1-5 scale
    is_featured: bool = False
    is_new: bool = False
    created_at: datetime = Field(default_factory=datetime.utcnow)

    # Added fields to match education levels and tracks
    education_level: str = Field(index=True)  # primary_1, bac_2, university, etc.
    academic_track: Optional[str] = Field(
        default=None, index=True
    )  # sciences_math_a, uni_medicine
    region_specific: bool = False
    region: Optional[str] = None  # For region-specific curriculum

    # Metadata enhanced to store preferences that would make this course relevant
    meta_data: Optional[Dict[str, Any]] = Field(default=None, sa_type=JSON)

    # Relationships (existing)
    subject: Subject = Relationship(back_populates="courses")
    course_topics: List["CourseTopic"] = Relationship(back_populates="course")


class Topic(SQLModel, table=True):
    """Model for topics within subjects."""

    id: Optional[int] = Field(default=None, primary_key=True)
    name: str
    subject_id: int = Field(foreign_key="subject.id")
    description: str
    order: int  # Sequence within subject
    difficulty: int = 3  # 1-5 scale
    estimated_duration_minutes: Optional[int] = None
    meta_data: Optional[Dict[str, Any]] = Field(
        default=None, sa_type=JSON
    )  # For time periods, prerequisites, etc.

    # Relationships
    subject: Subject = Relationship(back_populates="topics")
    lessons: List["Lesson"] = Relationship(back_populates="topic")
    tutoring_sessions: List["TutoringSession"] = Relationship(back_populates="topic")  # noqa: F821
    detailed_tutoring_sessions: List["DetailedTutoringSession"] = Relationship(  # noqa: F821
        back_populates="topic"
    )


class CourseTopic(SQLModel, table=True):
    """Mapping between courses and topics with sequence order."""

    id: Optional[int] = Field(default=None, primary_key=True)
    course_id: int = Field(foreign_key="course.id")
    topic_id: int = Field(foreign_key="topic.id")
    order: int  # Sequence within course

    # Relationships
    course: Course = Relationship(back_populates="course_topics")
    topic: Topic = Relationship()


class Lesson(SQLModel, table=True):
    """Model for lessons within topics."""

    id: Optional[int] = Field(default=None, primary_key=True)
    title: str
    topic_id: int = Field(foreign_key="topic.id")
    content_type: str  # "video", "text", "interactive", "quiz", etc.
    content: Dict[str, Any] = Field(
        default={}, sa_type=JSON
    )  # Flexible content storage
    order: int  # Sequence within topic
    duration_minutes: Optional[int] = None
    difficulty: int = 3  # 1-5 scale
    meta_data: Optional[Dict[str, Any]] = Field(default=None, sa_type=JSON)

    # Relationships
    topic: Topic = Relationship(back_populates="lessons")
    activities: List["Activity"] = Relationship(back_populates="lesson")  # noqa: F821


File: backend/src/db/models/community.py
from datetime import datetime
from typing import Optional, List
from sqlmodel import Field, SQLModel, Relationship, JSON

from .user import User
from .content import Subject, Topic


class StudySession(SQLModel, table=True):
    """Model for scheduled study sessions."""

    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(foreign_key="users.id")

    title: str
    session_type: str  # "focused", "practice", "homework", "review"
    start_time: datetime
    end_time: Optional[datetime] = None
    duration_minutes: int

    # Link to content
    subject_id: Optional[int] = Field(default=None, foreign_key="subject.id")
    topic_id: Optional[int] = Field(default=None, foreign_key="topic.id")

    # Status
    status: str = "scheduled"  # "scheduled", "in_progress", "completed", "cancelled"

    # Results
    summary: Optional[str] = None
    productivity_score: Optional[float] = None
    achievements: List[str] = Field(default=[], sa_type=JSON)

    # Relationships
    user: User = Relationship()
    subject: Optional[Subject] = Relationship()
    topic: Optional[Topic] = Relationship()


class StudyGroup(SQLModel, table=True):
    """Model for community study groups."""

    id: Optional[int] = Field(default=None, primary_key=True)
    name: str
    description: str
    created_by: int = Field(foreign_key="users.id")

    # Group details
    subject_id: Optional[int] = Field(default=None, foreign_key="subject.id")
    grade_level: Optional[str] = None
    is_private: bool = False

    # Status
    created_at: datetime = Field(default_factory=datetime.utcnow)
    active: bool = True

    # Relationships
    creator: User = Relationship(
        sa_relationship_kwargs={"foreign_keys": "[StudyGroup.created_by]"}
    )
    subject: Optional[Subject] = Relationship()
    members: List["StudyGroupMember"] = Relationship(back_populates="group")


class StudyGroupMember(SQLModel, table=True):
    """Model for study group membership."""

    id: Optional[int] = Field(default=None, primary_key=True)
    group_id: int = Field(foreign_key="studygroup.id")
    user_id: int = Field(foreign_key="users.id")

    # Membership details
    role: str = "member"  # "member", "moderator", "admin"
    joined_at: datetime = Field(default_factory=datetime.utcnow)

    # Relationships
    group: StudyGroup = Relationship(back_populates="members")
    user: User = Relationship()


class ForumPost(SQLModel, table=True):
    """Model for community forum posts."""

    id: Optional[int] = Field(default=None, primary_key=True)
    author_id: int = Field(foreign_key="users.id")

    title: str
    content: str

    # Categorization
    subject_id: Optional[int] = Field(default=None, foreign_key="subject.id")
    topic_id: Optional[int] = Field(default=None, foreign_key="topic.id")
    tags: List[str] = Field(default=[], sa_type=JSON)

    # Status
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None
    is_pinned: bool = False
    is_approved: bool = True

    # Statistics
    view_count: int = 0
    upvote_count: int = 0

    # Relationships
    author: User = Relationship()
    subject: Optional[Subject] = Relationship()
    topic: Optional[Topic] = Relationship()
    replies: List["ForumReply"] = Relationship(back_populates="post")


class ForumReply(SQLModel, table=True):
    """Model for replies to forum posts."""

    id: Optional[int] = Field(default=None, primary_key=True)
    post_id: int = Field(foreign_key="forumpost.id")
    author_id: int = Field(foreign_key="users.id")

    content: str

    # Status
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: Optional[datetime] = None
    is_solution: bool = False

    # Stats
    upvote_count: int = 0

    # Relationships
    post: ForumPost = Relationship(back_populates="replies")
    author: User = Relationship()


File: backend/src/db/models/tutoring.py
from datetime import datetime
from typing import List, Optional, Dict, Any
from sqlmodel import Field, SQLModel, Relationship, JSON
from sqlalchemy import Column, String

from .user import User
from .content import Topic


class TutoringSession(SQLModel, table=True):
    """Model for basic AI tutoring sessions."""

    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(foreign_key="users.id")
    topic_id: int = Field(foreign_key="topic.id")

    # Session details
    title: str  # Derived from initial question or topic
    start_time: datetime = Field(default_factory=datetime.utcnow)
    end_time: Optional[datetime] = None
    duration_seconds: Optional[int] = None
    status: str = "active"  # "active", "completed", "abandoned"

    # Session data
    context: Dict[str, Any] = Field(default={}, sa_type=JSON)
    feedback: Dict[str, Any] = Field(default={}, sa_type=JSON)
    messages: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Analytics
    total_messages: int = 0
    user_messages: int = 0
    ai_messages: int = 0
    topics_covered: List[str] = Field(default=[], sa_type=JSON)

    # Relationships
    user: User = Relationship(back_populates="tutoring_sessions")
    topic: Topic = Relationship(back_populates="tutoring_sessions")


class DetailedTutoringSession(SQLModel, table=True):
    """Advanced model for AI tutoring sessions with various interaction modes."""

    __tablename__ = "detailed_tutoring_session"

    # Keep string ID type to support UUIDs, but properly configure it using Column
    id: str = Field(sa_column=Column(String, primary_key=True))
    user_id: int = Field(foreign_key="users.id", index=True)
    topic_id: Optional[int] = Field(default=None, foreign_key="topic.id", index=True)

    # Session core info
    title: str  # Descriptive title for the session
    session_type: str = Field(index=True)  # "chat", "whiteboard", "video", "notes"
    interaction_mode: str  # "text-only", "voice", "ocr-enabled", "interactive-diagram"

    # Use datetime.utcnow without timezone info for PostgreSQL compatibility
    start_time: datetime = Field(default_factory=datetime.utcnow)
    end_time: Optional[datetime] = None
    duration_seconds: Optional[int] = None
    status: str = "active"  # "active", "paused", "completed", "abandoned"

    # Initial context
    initial_query: str  # The initial question or topic
    difficulty: Optional[int] = None  # 1-5 if applicable

    # LLM
    provider: Optional[str] = None  # openai, groq, etc.
    model: Optional[str] = None
    # Session configuration
    config: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Learning outcomes
    concepts_learned: List[str] = Field(default=[], sa_type=JSON)
    skills_practiced: List[str] = Field(default=[], sa_type=JSON)

    # Relationships
    user: User = Relationship(back_populates="detailed_tutoring_sessions")
    topic: Optional[Topic] = Relationship(back_populates="detailed_tutoring_sessions")
    exchanges: List["TutoringExchange"] = Relationship(back_populates="session")
    resources: List["SessionResource"] = Relationship(back_populates="session")


class TutoringExchange(SQLModel, table=True):
    """Model for back-and-forth exchanges in a tutoring session."""

    id: Optional[int] = Field(default=None, primary_key=True)
    # Reference string ID (UUID) from detailed_tutoring_session
    session_id: str = Field(foreign_key="detailed_tutoring_session.id", index=True)
    sequence: int  # Order in the conversation
    timestamp: datetime = Field(default_factory=datetime.utcnow)

    # Student input
    student_input_type: str  # "text", "voice", "ocr", "drawing", "file-upload"
    student_input: Dict[str, Any] = Field(sa_type=JSON)

    # AI response
    ai_response_type: str  # "text", "voice", "diagram", "annotation", "correction"
    ai_response: Dict[str, Any] = Field(sa_type=JSON)

    # Learning signals
    learning_signals: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Bookmarked status
    is_bookmarked: bool = False
    bookmarked_at: Optional[datetime] = None

    # Relationships
    session: DetailedTutoringSession = Relationship(back_populates="exchanges")


class SessionResource(SQLModel, table=True):
    """Model for resources used or created during a tutoring session."""

    id: Optional[int] = Field(default=None, primary_key=True)
    # Reference string ID (UUID) from detailed_tutoring_session
    session_id: str = Field(foreign_key="detailed_tutoring_session.id", index=True)

    # Resource info
    resource_type: str  # "formula", "diagram", "example", "summary", "practice-problem"
    title: str
    content: Dict[str, Any] = Field(sa_type=JSON)
    created_at: datetime = Field(default_factory=datetime.utcnow)

    # Usage
    student_saved: bool = False
    saved_at: Optional[datetime] = None

    # Relationships
    session: DetailedTutoringSession = Relationship(back_populates="resources")


File: backend/src/db/models/communication.py
from datetime import datetime
from typing import Optional, Dict, Any
from sqlmodel import Field, SQLModel, Relationship, JSON

from .user import User


class Notification(SQLModel, table=True):
    """Model for user notifications."""

    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(foreign_key="users.id")

    title: str
    content: str
    type: str  # "achievement", "reminder", "system", "progress", "social"
    is_read: bool = False
    created_at: datetime = Field(default_factory=datetime.utcnow)
    read_at: Optional[datetime] = None

    # Link to relevant content
    action_type: Optional[str] = None  # "open_session", "view_progress", etc.
    action_data: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Relationships
    user: User = Relationship(back_populates="notifications")


class Message(SQLModel, table=True):
    """Model for messages between users."""

    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(foreign_key="users.id")  # Sender
    recipient_id: int = Field(foreign_key="users.id")

    subject: str
    content: str
    is_read: bool = False
    created_at: datetime = Field(default_factory=datetime.utcnow)
    read_at: Optional[datetime] = None

    # Attachments and metadata
    has_attachments: bool = False
    attachments: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Relationships
    user: User = Relationship(
        back_populates="messages",
        sa_relationship_kwargs={"foreign_keys": "[Message.user_id]"},
    )
    recipient: User = Relationship(
        sa_relationship_kwargs={"foreign_keys": "[Message.recipient_id]"}
    )


File: backend/src/db/models/progress.py
from typing import Optional, Dict, Any
from sqlmodel import JSON
from datetime import datetime, timezone

from .user import User
from .content import Subject, Lesson

from sqlmodel import Relationship, SQLModel, Field


class Enrollment(SQLModel, table=True):
    """Model for subject enrollments."""

    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(foreign_key="users.id")
    subject_id: int = Field(foreign_key="subject.id")
    enrolled_at: datetime = Field(default_factory=datetime.now(timezone.utc))
    active: bool = True
    completed: bool = False
    completed_at: Optional[datetime] = None
    last_activity_at: Optional[datetime] = None

    # Progress tracking
    progress_percentage: float = 0.0
    progress_data: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Relationships
    user: User = Relationship(back_populates="enrollments")
    subject: Subject = Relationship(back_populates="enrollments")


class Activity(SQLModel, table=True):
    """Model for all learning activities including assessments."""

    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(foreign_key="users.id")
    lesson_id: Optional[int] = Field(default=None, foreign_key="lesson.id")

    # Activity details
    type: str  # "lesson", "quiz", "practice", "tutoring", "homework"
    status: str = "started"  # "started", "in_progress", "completed", "abandoned"
    start_time: datetime = Field(default_factory=datetime.now(timezone.utc))
    end_time: Optional[datetime] = None
    duration_seconds: Optional[int] = None

    # Performance metrics
    score: Optional[float] = None
    max_score: Optional[float] = None
    mastery_level: Optional[float] = None  # 0-1 scale

    # Flexible data fields for different activity types
    data: Dict[str, Any] = Field(default={}, sa_type=JSON)
    results: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Relationships
    user: User = Relationship(back_populates="activities")
    lesson: Optional[Lesson] = Relationship(back_populates="activities")


class Achievement(SQLModel, table=True):
    """Model for user achievements and badges."""

    id: Optional[int] = Field(default=None, primary_key=True)
    user_id: int = Field(foreign_key="users.id")

    title: str
    description: str
    type: str  # "badge", "milestone", "certificate", "streak"
    icon: str
    awarded_at: datetime = Field(default_factory=datetime.now(timezone.utc))
    points: int = 0
    meta_data: Dict[str, Any] = Field(default={}, sa_type=JSON)

    # Relationships
    user: User = Relationship(back_populates="achievements")


backend/src/
├── __init__.py
├── __pycache__
│   ├── __init__.cpython-313.pyc
│   └── main.cpython-313.pyc
├── api
│   ├── __init__.py
│   ├── __pycache__
│   │   └── __init__.cpython-313.pyc
│   ├── dependencies
│   │   ├── __init__.py
│   │   └── __pycache__
│   │       └── __init__.cpython-313.pyc
│   ├── endpoints
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-313.pyc
│   │   │   ├── auth.cpython-313.pyc
│   │   │   ├── dashboard.cpython-313.pyc
│   │   │   ├── explore.cpython-313.pyc
│   │   │   ├── learning.cpython-313.pyc
│   │   │   ├── progress.cpython-313.pyc
│   │   │   ├── recommendations.cpython-313.pyc
│   │   │   ├── school_onboarding.cpython-313.pyc
│   │   │   ├── schools.cpython-313.pyc
│   │   │   ├── subjects.cpython-313.pyc
│   │   │   ├── tutoring.cpython-313.pyc
│   │   │   └── users.cpython-313.pyc
│   │   ├── auth.py
│   │   ├── learning.py
│   │   ├── progress.py
│   │   ├── recommendations.py
│   │   ├── school_onboarding.py
│   │   ├── schools.py
│   │   ├── subjects.py
│   │   ├── tutoring.py
│   │   └── users.py
│   └── models
│       ├── __init__.py
│       ├── __pycache__
│       │   ├── __init__.cpython-313.pyc
│       │   ├── auth.cpython-313.pyc
│       │   ├── content.cpython-313.pyc
│       │   ├── progress.cpython-313.pyc
│       │   ├── recommendation.cpython-313.pyc
│       │   ├── school.cpython-313.pyc
│       │   ├── tutoring.cpython-313.pyc
│       │   └── user.cpython-313.pyc
│       ├── auth.py
│       ├── content.py
│       ├── progress.py
│       ├── recommendation.py
│       ├── school.py
│       ├── tutoring.py
│       └── user.py
├── core
│   ├── __init__.py
│   ├── __pycache__
│   │   ├── __init__.cpython-313.pyc
│   │   ├── llm.cpython-313.pyc
│   │   ├── security.cpython-313.pyc
│   │   └── settings.cpython-313.pyc
│   ├── llm.py
│   ├── security.py
│   └── settings.py
├── db
│   ├── __init__.py
│   ├── __pycache__
│   │   ├── __init__.cpython-313.pyc
│   │   └── postgresql.cpython-313.pyc
│   ├── models
│   │   ├── __init__.py
│   │   ├── __pycache__
│   │   │   ├── __init__.cpython-313.pyc
│   │   │   ├── communication.cpython-313.pyc
│   │   │   ├── community.cpython-313.pyc
│   │   │   ├── content.cpython-313.pyc
│   │   │   ├── professor.cpython-313.pyc
│   │   │   ├── progress.cpython-313.pyc
│   │   │   ├── recommendations.cpython-313.pyc
│   │   │   ├── school.cpython-313.pyc
│   │   │   ├── tutoring.cpython-313.pyc
│   │   │   ├── tutoring_integration.cpython-313.pyc
│   │   │   └── user.cpython-313.pyc
│   │   ├── communication.py
│   │   ├── community.py
│   │   ├── content.py
│   │   ├── professor.py
│   │   ├── progress.py
│   │   ├── recommendations.py
│   │   ├── school.py
│   │   ├── tutoring.py
│   │   ├── tutoring_integration.py
│   │   └── user.py
│   └── postgresql.py
├── main.py
└── utils
    ├── __init__.py
    ├── __pycache__
    │   ├── __init__.cpython-313.pyc
    │   └── progress_helpers.cpython-313.pyc
    └── progress_helpers.py

18 directories, 84 files
web/src/
├── app
│   ├── [locale]
│   │   ├── (auth)
│   │   │   ├── forgot-password
│   │   │   │   └── page.tsx
│   │   │   ├── layout.tsx
│   │   │   ├── login
│   │   │   │   └── page.tsx
│   │   │   └── register
│   │   │       └── page.tsx
│   │   ├── dashboard
│   │   │   ├── _components
│   │   │   │   └── ExploreSearch.tsx
│   │   │   ├── community
│   │   │   │   ├── forums
│   │   │   │   │   └── page.tsx
│   │   │   │   ├── groups
│   │   │   │   │   └── page.tsx
│   │   │   │   ├── leaderboard
│   │   │   │   │   └── page.tsx
│   │   │   │   └── page.tsx
│   │   │   ├── layout.tsx
│   │   │   ├── learn
│   │   │   │   ├── courses
│   │   │   │   │   ├── [courseId]
│   │   │   │   │   │   └── page.tsx
│   │   │   │   │   └── page.tsx
│   │   │   │   ├── explore
│   │   │   │   │   ├── [topicId]
│   │   │   │   │   │   └── page.tsx
│   │   │   │   │   └── page.tsx
│   │   │   │   ├── page.tsx
│   │   │   │   ├── schedule
│   │   │   │   │   └── page.tsx
│   │   │   │   └── subjects
│   │   │   │       ├── [subjectId]
│   │   │   │       │   └── page.tsx
│   │   │   │       └── page.tsx
│   │   │   ├── page.tsx
│   │   │   ├── profile
│   │   │   │   ├── _components
│   │   │   │   │   ├── GuardianManagement.tsx
│   │   │   │   │   ├── LearningProgress.tsx
│   │   │   │   │   └── ProfilePage.tsx
│   │   │   │   └── page.tsx
│   │   │   ├── progress
│   │   │   │   ├── achievements
│   │   │   │   │   └── page.tsx
│   │   │   │   ├── analytics
│   │   │   │   │   └── page.tsx
│   │   │   │   ├── page.tsx
│   │   │   │   └── reports
│   │   │   │       └── page.tsx
│   │   │   ├── sessions
│   │   │   │   ├── history
│   │   │   │   │   └── page.tsx
│   │   │   │   ├── new
│   │   │   │   │   └── page.tsx
│   │   │   │   ├── page.tsx
│   │   │   │   └── practice
│   │   │   │       └── page.tsx
│   │   │   ├── settings
│   │   │   │   └── page.tsx
│   │   │   └── tutor
│   │   │       ├── [sessionId]
│   │   │       │   └── page.tsx
│   │   │       ├── chat
│   │   │       │   ├── [chatId]
│   │   │       │   │   ├── _components
│   │   │       │   │   │   ├── ChatHeader.tsx
│   │   │       │   │   │   ├── ChatInput.tsx
│   │   │       │   │   │   ├── ChatMessage.tsx
│   │   │       │   │   │   ├── MathCalculator.tsx
│   │   │       │   │   │   ├── MathTemplates.tsx
│   │   │       │   │   │   ├── WelcomeState.tsx
│   │   │       │   │   │   └── WhiteBoardPanel.tsx
│   │   │       │   │   └── page.tsx
│   │   │       │   └── page.tsx
│   │   │       ├── page.tsx
│   │   │       └── whiteboard
│   │   │           ├── [sessionId]
│   │   │           │   └── page.tsx
│   │   │           └── page.tsx
│   │   ├── layout.tsx
│   │   ├── onboarding
│   │   │   ├── _components
│   │   │   │   └── Onboarding.tsx
│   │   │   ├── page.tsx
│   │   │   └── school
│   │   │       ├── _components
│   │   │       │   ├── AcademicUnitsStep.tsx
│   │   │       │   ├── AnalyticsStep.tsx
│   │   │       │   ├── CoursesStep.tsx
│   │   │       │   ├── IntegrationsStep.tsx
│   │   │       │   ├── SchoolProfileStep.tsx
│   │   │       │   ├── StaffStep.tsx
│   │   │       │   └── StudentsStep.tsx
│   │   │       ├── layout.tsx
│   │   │       └── page.tsx
│   │   └── page.tsx
│   ├── favicon.ico
│   ├── globals.css
│   ├── layout.tsx
│   ├── not-found.tsx
│   └── page.tsx
├── components
│   ├── global
│   │   ├── DashboardHeader.tsx
│   │   ├── Logo.tsx
│   │   ├── MobileSidebar.tsx
│   │   ├── Sidebar.tsx
│   │   └── ThemeModeToggle.tsx
│   ├── language-switcher.tsx
│   └── ui
│       ├── accordion.tsx
│       ├── alert-dialog.tsx
│       ├── alert.tsx
│       ├── aspect-ratio.tsx
│       ├── avatar.tsx
│       ├── badge.tsx
│       ├── breadcrumb.tsx
│       ├── button.tsx
│       ├── calendar.tsx
│       ├── card.tsx
│       ├── carousel.tsx
│       ├── chart.tsx
│       ├── checkbox.tsx
│       ├── collapsible.tsx
│       ├── command.tsx
│       ├── context-menu.tsx
│       ├── dialog.tsx
│       ├── drawer.tsx
│       ├── dropdown-menu.tsx
│       ├── form.tsx
│       ├── hover-card.tsx
│       ├── input-otp.tsx
│       ├── input.tsx
│       ├── label.tsx
│       ├── menubar.tsx
│       ├── navigation-menu.tsx
│       ├── pagination.tsx
│       ├── popover.tsx
│       ├── progress.tsx
│       ├── radio-group.tsx
│       ├── resizable.tsx
│       ├── scroll-area.tsx
│       ├── select.tsx
│       ├── separator.tsx
│       ├── sheet.tsx
│       ├── skeleton.tsx
│       ├── slider.tsx
│       ├── sonner.tsx
│       ├── switch.tsx
│       ├── table.tsx
│       ├── tabs.tsx
│       ├── textarea.tsx
│       ├── toggle-group.tsx
│       ├── toggle.tsx
│       └── tooltip.tsx
├── hooks
│   ├── use-mobile.ts
│   └── use-toast.ts
├── i18n
│   ├── client.ts
│   ├── config.ts
│   └── dictionaries
│       ├── ar.ts
│       ├── en.ts
│       └── fr.ts
├── lib
│   ├── config.ts
│   └── utils.ts
├── middleware.ts
├── providers
│   ├── AuthProvider.tsx
│   ├── ChatToolsContext.tsx
│   └── index.tsx
├── services
│   ├── ChatService.ts
│   ├── CoursesService.ts
│   ├── DashboardService.ts
│   ├── ExploreService.ts
│   ├── FileService.ts
│   ├── LearningService.ts
│   ├── ProfileService.ts
│   ├── SchoolOnboardingService.ts
│   ├── SubjectsService.ts
│   └── TutorService.ts
└── types
    ├── dashboard.ts
    └── user.ts

53 directories, 139 files
